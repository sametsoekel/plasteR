var_names <- variable.names(dfn)
skewness <- results$Descriptives$Skew
normality_test <- results$univariateNormality$Normality
normality_p_value <- results$univariateNormality$`p value`
####### some statistical calculations via MVN ######
#########################################################################################################
######## finding optimal plot margins #########
margin <- margin_arbiter(length(dfn))
xlim <- margin$xlim
ylim <- margin$ylim
######## finding optimal plot margins #########
#########################################################################################################
######## below plots  ########
if(plot_show==TRUE){
plotter <- function(x,var){
den <- density(x[[var]],na.rm = T)
####### finding the p value and skewness indexes ########
skw <- skewness[which(var_names==var)]
ntest <- normality_test[which(var_names==var)]
#####
lenx <- max(x[[var]],na.rm = T)-min(x[[var]],na.rm = T)
leny <- den$bw
lim1 <- min(x[[var]],na.rm = T)-2*lenx
lim2 <- max(x[[var]],na.rm = T)+2*lenx
####### finding the p value and skewness indexes ########
text_vector <- c("Skewness Coef.:",toString(skw),
"Normality Test :",toString(ntest))
color_vector <- c("dodgerblue","dodgerblue",
"darkblue","darkblue")
if (!anyNA(x[[var]])){
plot(den,
main = var,
xlab = "",
ylab = "",
xlim=c(lim1,lim2))
legend("topright",text_vector,
bty = "n",cex = .9,text.col = color_vector)
}
else{
plot(den,
main = var,
xlab = "",
ylab = "",
xlim=c(lim1,lim2))
legend("bottomleft",
"This Var. \nIncluding Missing Values",
bty = "n",cex = .9,text.col = "darkred")
legend("topright",text_vector,
bty = "n",cex = .9,text.col = color_vector)
}
}
par(mfrow=c(xlim,ylim),mar=c(2.3,2.3,2.3,1))
for(vn in var_names) plotter(dfn, vn)
}
######## top plots ########
}
outlier.outline(my)
outlier.outline <- function(data,plot_show = TRUE,type="density",get_skew=FALSE){
####### margin arbiter func.-start ########
margin_arbiter <-function(x){
if(sqrt(x) == round(sqrt(x))){
xlim <- sqrt(x)
ylim <- sqrt(x)
return(list("xlim"=xlim,"ylim"=ylim))
}
else{
xlim <- sqrt(x)
xlim <- floor(xlim)
ylim <- xlim + 1
if(xlim*ylim<x){
return(list("xlim"=xlim+1,"ylim"=ylim))
}
else{
return(list("xlim"=xlim,"ylim"=ylim))
}
}
}
####### margin arbiter func.-end ########
#########################################################################################################
####### some statistical calculations via MVN ######
options(warn=-1) ## warn hider
df <- data.frame(data)
dfn <- keep(df,is.numeric)
if(nrow(dfn)>=5000 || nrow(dfn)<3) {
stop("Sample size should be between 3 and 5000")}
results <- mvn(dfn)
var_names <- variable.names(dfn)
skewness <- results$Descriptives$Skew
normality_test <- results$univariateNormality$Normality
normality_p_value <- results$univariateNormality$`p value`
####### some statistical calculations via MVN ######
#########################################################################################################
######## finding optimal plot margins #########
margin <- margin_arbiter(length(dfn))
xlim <- margin$xlim
ylim <- margin$ylim
######## finding optimal plot margins #########
#########################################################################################################
######## below plots  ########
if(plot_show==TRUE){
plotter <- function(x,var){
den <- density(x[[var]],na.rm = T)
####### finding the p value and skewness indexes ########
skw <- skewness[which(var_names==var)]
ntest <- normality_test[which(var_names==var)]
#####
lenx <- max(x[[var]],na.rm = T)-min(x[[var]],na.rm = T)
leny <- den$bw
lim1 <- min(x[[var]],na.rm = T)-lenx
lim2 <- max(x[[var]],na.rm = T)+lenx
####### finding the p value and skewness indexes ########
text_vector <- c("Skewness Coef.:",toString(skw),
"Normality Test :",toString(ntest))
color_vector <- c("dodgerblue","dodgerblue",
"darkblue","darkblue")
if (!anyNA(x[[var]])){
plot(den,
main = var,
xlab = "",
ylab = "",
xlim=c(lim1,lim2))
legend("topright",text_vector,
bty = "n",cex = .9,text.col = color_vector)
}
else{
plot(den,
main = var,
xlab = "",
ylab = "",
xlim=c(lim1,lim2))
legend("bottomleft",
"This Var. \nIncluding Missing Values",
bty = "n",cex = .9,text.col = "darkred")
legend("topright",text_vector,
bty = "n",cex = .9,text.col = color_vector)
}
}
par(mfrow=c(xlim,ylim),mar=c(2.3,2.3,2.3,1))
for(vn in var_names) plotter(dfn, vn)
}
######## top plots ########
}
outlier.outline(my)
outlier.outline(mtcars)
#' Outlier Outline
#'
#' This function allows you a report about outliers of your data.
#' @param data Dataset, matrix or dataframe.
#' @param plot_show Logical argument for plot.
#' @keywords outlier
#' @export
#' @examples
#' outlier.outline(Hitters,plot_show = TRUE)
outlier.outline <- function(data,plot_show = TRUE,type="density",get_skew=FALSE){
####### margin arbiter func.-start ########
margin_arbiter <-function(x){
if(sqrt(x) == round(sqrt(x))){
xlim <- sqrt(x)
ylim <- sqrt(x)
return(list("xlim"=xlim,"ylim"=ylim))
}
else{
xlim <- sqrt(x)
xlim <- floor(xlim)
ylim <- xlim + 1
if(xlim*ylim<x){
return(list("xlim"=xlim+1,"ylim"=ylim))
}
else{
return(list("xlim"=xlim,"ylim"=ylim))
}
}
}
####### margin arbiter func.-end ########
#########################################################################################################
####### some statistical calculations via MVN ######
options(warn=-1) ## warn hider
df <- data.frame(data)
dfn <- keep(df,is.numeric)
if(nrow(dfn)>=5000 || nrow(dfn)<3) {
stop("Sample size should be between 3 and 5000")}
results <- mvn(dfn)
var_names <- variable.names(dfn)
skewness <- results$Descriptives$Skew
normality_test <- results$univariateNormality$Normality
normality_p_value <- results$univariateNormality$`p value`
####### some statistical calculations via MVN ######
#########################################################################################################
######## finding optimal plot margins #########
margin <- margin_arbiter(length(dfn))
xlim <- margin$xlim
ylim <- margin$ylim
######## finding optimal plot margins #########
#########################################################################################################
######## below plots  ########
if(plot_show==TRUE){
plotter <- function(x,var){
den <- density(x[[var]],na.rm = T)
####### finding the p value and skewness indexes ########
skw <- skewness[which(var_names==var)]
ntest <- normality_test[which(var_names==var)]
#####
lenx <- max(x[[var]],na.rm = T)-min(x[[var]],na.rm = T)
leny <- den$bw
lim1 <- min(x[[var]],na.rm = T)-lenx
lim2 <- max(x[[var]],na.rm = T)+lenx
####### finding the p value and skewness indexes ########
text_vector <- c("Skewness Coef.:",toString(skw),
"Normality Test :",toString(ntest))
color_vector <- c("dodgerblue","dodgerblue",
"darkblue","darkblue")
if (!anyNA(x[[var]])){
plot(den,
main = var,
xlab = "",
ylab = "",
xlim=c(lim1,lim2))
legend("topright",text_vector,
bty = "n",cex = .9,text.col = color_vector)
}
else{
plot(den,
main = paste(var," (including NA's)")
xlab = "",
ylab = "",
xlim=c(lim1,lim2))
legend("topright",text_vector,
bty = "n",cex = .9,text.col = color_vector)
}
}
par(mfrow=c(xlim,ylim),mar=c(2.3,2.3,2.3,1))
for(vn in var_names) plotter(dfn, vn)
}
######## top plots ########
}
outlier.outline(mtcars)
#' Outlier Outline
#'
#' This function allows you a report about outliers of your data.
#' @param data Dataset, matrix or dataframe.
#' @param plot_show Logical argument for plot.
#' @keywords outlier
#' @export
#' @examples
#' outlier.outline(Hitters,plot_show = TRUE)
outlier.outline <- function(data,plot_show = TRUE,type="density",get_skew=FALSE){
####### margin arbiter func.-start ########
margin_arbiter <-function(x){
if(sqrt(x) == round(sqrt(x))){
xlim <- sqrt(x)
ylim <- sqrt(x)
return(list("xlim"=xlim,"ylim"=ylim))
}
else{
xlim <- sqrt(x)
xlim <- floor(xlim)
ylim <- xlim + 1
if(xlim*ylim<x){
return(list("xlim"=xlim+1,"ylim"=ylim))
}
else{
return(list("xlim"=xlim,"ylim"=ylim))
}
}
}
####### margin arbiter func.-end ########
#########################################################################################################
####### some statistical calculations via MVN ######
options(warn=-1) ## warn hider
df <- data.frame(data)
dfn <- keep(df,is.numeric)
if(nrow(dfn)>=5000 || nrow(dfn)<3) {
stop("Sample size should be between 3 and 5000")}
results <- mvn(dfn)
var_names <- variable.names(dfn)
skewness <- results$Descriptives$Skew
normality_test <- results$univariateNormality$Normality
normality_p_value <- results$univariateNormality$`p value`
####### some statistical calculations via MVN ######
#########################################################################################################
######## finding optimal plot margins #########
margin <- margin_arbiter(length(dfn))
xlim <- margin$xlim
ylim <- margin$ylim
######## finding optimal plot margins #########
#########################################################################################################
######## below plots  ########
if(plot_show==TRUE){
plotter <- function(x,var){
den <- density(x[[var]],na.rm = T)
####### finding the p value and skewness indexes ########
skw <- skewness[which(var_names==var)]
ntest <- normality_test[which(var_names==var)]
#####
lenx <- max(x[[var]],na.rm = T)-min(x[[var]],na.rm = T)
leny <- den$bw
lim1 <- min(x[[var]],na.rm = T)-lenx
lim2 <- max(x[[var]],na.rm = T)+lenx
####### finding the p value and skewness indexes ########
text_vector <- c("Skewness Coef.:",toString(skw),
"Normality Test :",toString(ntest))
color_vector <- c("dodgerblue","dodgerblue",
"darkblue","darkblue")
if (!anyNA(x[[var]])){
plot(den,
main = var,
xlab = "",
ylab = "",
xlim=c(lim1,lim2))
legend("topright",text_vector,
bty = "n",cex = .9,text.col = color_vector)
}
else{
plot(den,
main = paste(var," (including NA's)")
xlab = "",
ylab = "",
xlim=c(lim1,lim2))
legend("topright",text_vector,
bty = "n",cex = .9,text.col = color_vector)
}
}
par(mfrow=c(xlim,ylim),mar=c(2.3,2.3,2.3,1))
for(vn in var_names) plotter(dfn, vn)
}
######## top plots ########
}
outlier.outline(mtcars)
#' Outlier Outline
#'
#' This function allows you a report about outliers of your data.
#' @param data Dataset, matrix or dataframe.
#' @param plot_show Logical argument for plot.
#' @keywords outlier
#' @export
#' @examples
#' outlier.outline(Hitters,plot_show = TRUE)
outlier.outline <- function(data,plot_show = TRUE,type="density",get_skew=FALSE){
####### margin arbiter func.-start ########
margin_arbiter <-function(x){
if(sqrt(x) == round(sqrt(x))){
xlim <- sqrt(x)
ylim <- sqrt(x)
return(list("xlim"=xlim,"ylim"=ylim))
}
else{
xlim <- sqrt(x)
xlim <- floor(xlim)
ylim <- xlim + 1
if(xlim*ylim<x){
return(list("xlim"=xlim+1,"ylim"=ylim))
}
else{
return(list("xlim"=xlim,"ylim"=ylim))
}
}
}
####### margin arbiter func.-end ########
#########################################################################################################
####### some statistical calculations via MVN ######
options(warn=-1) ## warn hider
df <- data.frame(data)
dfn <- keep(df,is.numeric)
if(nrow(dfn)>=5000 || nrow(dfn)<3) {
stop("Sample size should be between 3 and 5000")}
results <- mvn(dfn)
var_names <- variable.names(dfn)
skewness <- results$Descriptives$Skew
normality_test <- results$univariateNormality$Normality
normality_p_value <- results$univariateNormality$`p value`
####### some statistical calculations via MVN ######
#########################################################################################################
######## finding optimal plot margins #########
margin <- margin_arbiter(length(dfn))
xlim <- margin$xlim
ylim <- margin$ylim
######## finding optimal plot margins #########
#########################################################################################################
######## below plots  ########
if(plot_show==TRUE){
plotter <- function(x,var){
den <- density(x[[var]],na.rm = T)
####### finding the p value and skewness indexes ########
skw <- skewness[which(var_names==var)]
ntest <- normality_test[which(var_names==var)]
#####
lenx <- max(x[[var]],na.rm = T)-min(x[[var]],na.rm = T)
leny <- den$bw
lim1 <- min(x[[var]],na.rm = T)-lenx
lim2 <- max(x[[var]],na.rm = T)+lenx
####### finding the p value and skewness indexes ########
text_vector <- c("Skewness Coef.:",toString(skw),
"Normality Test :",toString(ntest))
color_vector <- c("dodgerblue","dodgerblue",
"darkblue","darkblue")
if (!anyNA(x[[var]])){
plot(den,
main = var,
xlab = "",
ylab = "",
xlim=c(lim1,lim2))
legend("topright",text_vector,
bty = "n",cex = .9,text.col = color_vector)
}
else{
plot(den,
main = paste(var," (including NA's)"),
xlab = "",
ylab = "",
xlim=c(lim1,lim2))
legend("topright",text_vector,
bty = "n",cex = .9,text.col = color_vector)
}
}
par(mfrow=c(xlim,ylim),mar=c(2.3,2.3,2.3,1))
for(vn in var_names) plotter(dfn, vn)
}
######## top plots ########
}
outlier.outline(mtcars)
outlier.outline(Hitters)
#' Outlier Outline
#'
#' This function allows you a report about outliers of your data.
#' @param data Dataset, matrix or dataframe.
#' @param plot_show Logical argument for plot.
#' @keywords outlier
#' @export
#' @examples
#' outlier.outline(Hitters,plot_show = TRUE)
outlier.outline <- function(data,plot_show = TRUE,type="density",get_skew=FALSE){
####### margin arbiter func.-start ########
margin_arbiter <-function(x){
if(sqrt(x) == round(sqrt(x))){
xlim <- sqrt(x)
ylim <- sqrt(x)
return(list("xlim"=xlim,"ylim"=ylim))
}
else{
xlim <- sqrt(x)
xlim <- floor(xlim)
ylim <- xlim + 1
if(xlim*ylim<x){
return(list("xlim"=xlim+1,"ylim"=ylim))
}
else{
return(list("xlim"=xlim,"ylim"=ylim))
}
}
}
####### margin arbiter func.-end ########
#########################################################################################################
####### some statistical calculations via MVN ######
options(warn=-1) ## warn hider
df <- data.frame(data)
dfn <- keep(df,is.numeric)
if(nrow(dfn)>=5000 || nrow(dfn)<3) {
stop("Sample size should be between 3 and 5000")}
results <- mvn(dfn)
var_names <- variable.names(dfn)
skewness <- results$Descriptives$Skew
normality_test <- results$univariateNormality$Normality
normality_p_value <- results$univariateNormality$`p value`
####### some statistical calculations via MVN ######
#########################################################################################################
######## finding optimal plot margins #########
margin <- margin_arbiter(length(dfn))
xlim <- margin$xlim
ylim <- margin$ylim
######## finding optimal plot margins #########
#########################################################################################################
######## below plots  ########
if(plot_show==TRUE){
plotter <- function(x,var){
den <- density(x[[var]],na.rm = T)
####### finding the p value and skewness indexes ########
skw <- skewness[which(var_names==var)]
ntest <- normality_test[which(var_names==var)]
#####
lenx <- max(x[[var]],na.rm = T)-min(x[[var]],na.rm = T)
leny <- den$bw
lim1 <- min(x[[var]],na.rm = T)-lenx
lim2 <- max(x[[var]],na.rm = T)+lenx
####### finding the p value and skewness indexes ########
text_vector <- c("Skewness Coef.:",toString(skw),
"Normality Test :",toString(ntest))
color_vector <- c("dodgerblue","dodgerblue",
"darkblue","darkblue")
if (!anyNA(x[[var]])){
plot(den,
main = var,
xlab = "",
ylab = "",
xlim=c(lim1,lim2))
legend("topright",text_vector,
bty = "n",cex = .9,text.col = color_vector)
}
else{
plot(den,
main = paste(var," (including NA's)"),
xlab = "",
ylab = "",
xlim=c(lim1,lim2))
legend("topright",text_vector,
bty = "n",cex = .9,text.col = color_vector)
}
}
par(mfrow=c(xlim,ylim),mar=c(2.3,2.3,2.3,1))
for(vn in var_names) plotter(dfn, vn)
}
######## top plots ########
}
