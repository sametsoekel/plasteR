}
}
plotter <- function(x){
#boxplot(x,horizontal = T,axes =F)
if(anyNA(x)){
x<-na.omit(x)
plot(density(x),
main = "",
xlab = "",
ylab = "")
legend("right",c("p value = 3","negative skew"),cex = .7,bty = "n")
mtext("This Var. Includes\nMissing Variables",side=4,cex = .7)
}
else{
plot(density(x),
main = "",
xlab = "",
ylab = "")
legend("right",c("p value = 3","negative skew"),cex = .7,,bty = "n")
}
}
just_numeric_index <- unlist(lapply(df, is.numeric))
just_numeric_vars <- df[,just_numeric_index]
margins <- margin_arbiter(length(just_numeric_index))
## below plots
if(plot_show==TRUE){
par(mfrow=c(margins$xlim,margins$ylim),new=F,mar=c(1,1,1,1))
k<-apply(just_numeric_vars,2,plotter)
}
## top plots
}
outlier.outline(Hitters,plot_show = T)
#' Outlier Outline
#'
#' This function allows you a report about outliers of your data.
#' @param data Dataset, matrix or dataframe.
#' @param plot_show Logical argument for plotting outliers.
#' @keywords outlier
#' @export
#' @examples
#' outlier.outline(Hitters,plot_show = TRUE)
outlier.outline <- function(data,plot_show = TRUE,type="density"){
options(warn=-1) ## warn silici
df <- data.frame(data)
margin_arbiter <-function(x){
if(sqrt(x) == round(sqrt(x))){
xlim <- sqrt(x)
ylim <- sqrt(x)
return(list("xlim"=xlim,"ylim"=ylim))
}
else{
xlim <- sqrt(x)
xlim <- floor(xlim)
ylim <- xlim + 1
if(xlim*ylim<x){
return(list("xlim"=xlim+1,"ylim"=ylim))
}
else{
return(list("xlim"=xlim,"ylim"=ylim))
}
}
}
plotter <- function(x){
#boxplot(x,horizontal = T,axes =F)
if(anyNA(x)){
x<-na.omit(x)
plot(density(x),
main = "",
xlab = "",
ylab = "")
legend("topright",c("p value = 3","negative skew"),cex = 1,bty = "n")
mtext("This Var. Includes\nMissing Variables",side=4,cex = .7)
}
else{
plot(density(x),
main = "",
xlab = "",
ylab = "")
legend("topright",c("p value = 3","negative skew"),cex = 1,,bty = "n")
}
}
just_numeric_index <- unlist(lapply(df, is.numeric))
just_numeric_vars <- df[,just_numeric_index]
margins <- margin_arbiter(length(just_numeric_index))
## below plots
if(plot_show==TRUE){
par(mfrow=c(margins$xlim,margins$ylim),new=F,mar=c(1,1,1,1))
k<-apply(just_numeric_vars,2,plotter)
}
## top plots
}
outlier.outline(Hitters,plot_show = T)
#' Outlier Outline
#'
#' This function allows you a report about outliers of your data.
#' @param data Dataset, matrix or dataframe.
#' @param plot_show Logical argument for plotting outliers.
#' @keywords outlier
#' @export
#' @examples
#' outlier.outline(Hitters,plot_show = TRUE)
outlier.outline <- function(data,plot_show = TRUE,type="density"){
options(warn=-1) ## warn silici
df <- data.frame(data)
margin_arbiter <-function(x){
if(sqrt(x) == round(sqrt(x))){
xlim <- sqrt(x)
ylim <- sqrt(x)
return(list("xlim"=xlim,"ylim"=ylim))
}
else{
xlim <- sqrt(x)
xlim <- floor(xlim)
ylim <- xlim + 1
if(xlim*ylim<x){
return(list("xlim"=xlim+1,"ylim"=ylim))
}
else{
return(list("xlim"=xlim,"ylim"=ylim))
}
}
}
plotter <- function(x){
#boxplot(x,horizontal = T,axes =F)
if(anyNA(x)){
x<-na.omit(x)
plot(density(x),
main = "",
xlab = "",
ylab = "")
legend("topright",c("p value = 3","negative skew"),cex = 1,bty = "n")
mtext("This Var. Includes\nMissing Variables",side=4,cex = .7)
}
else{
plot(density(x),
main = "",
xlab = "",
ylab = "")
legend("right",c("p value = 3","negative skew"),cex = 1,,bty = "n")
}
}
just_numeric_index <- unlist(lapply(df, is.numeric))
just_numeric_vars <- df[,just_numeric_index]
margins <- margin_arbiter(length(just_numeric_index))
## below plots
if(plot_show==TRUE){
par(mfrow=c(margins$xlim,margins$ylim),new=F,mar=c(1,1,1,1))
k<-apply(just_numeric_vars,2,plotter)
}
## top plots
}
outlier.outline(Hitters,plot_show = T)
#' Outlier Outline
#'
#' This function allows you a report about outliers of your data.
#' @param data Dataset, matrix or dataframe.
#' @param plot_show Logical argument for plotting outliers.
#' @keywords outlier
#' @export
#' @examples
#' outlier.outline(Hitters,plot_show = TRUE)
outlier.outline <- function(data,plot_show = TRUE,type="density"){
options(warn=-1) ## warn silici
df <- data.frame(data)
margin_arbiter <-function(x){
if(sqrt(x) == round(sqrt(x))){
xlim <- sqrt(x)
ylim <- sqrt(x)
return(list("xlim"=xlim,"ylim"=ylim))
}
else{
xlim <- sqrt(x)
xlim <- floor(xlim)
ylim <- xlim + 1
if(xlim*ylim<x){
return(list("xlim"=xlim+1,"ylim"=ylim))
}
else{
return(list("xlim"=xlim,"ylim"=ylim))
}
}
}
plotter <- function(x){
#boxplot(x,horizontal = T,axes =F)
if(anyNA(x)){
x<-na.omit(x)
plot(density(x),
main = "",
xlab = "",
ylab = "")
legend("topright",c("p value = 3","negative skew"),cex = 1,bty = "n")
mtext("This Var. Includes\nMissing Variables",side=4,cex = .7)
}
else{
plot(density(x),
main = "",
xlab = "",
ylab = "")
legend("center",c("p value = 3","negative skew"),cex = 1,,bty = "n")
}
}
just_numeric_index <- unlist(lapply(df, is.numeric))
just_numeric_vars <- df[,just_numeric_index]
margins <- margin_arbiter(length(just_numeric_index))
## below plots
if(plot_show==TRUE){
par(mfrow=c(margins$xlim,margins$ylim),new=F,mar=c(1,1,1,1))
k<-apply(just_numeric_vars,2,plotter)
}
## top plots
}
outlier.outline(Hitters,plot_show = T)
#' Outlier Outline
#'
#' This function allows you a report about outliers of your data.
#' @param data Dataset, matrix or dataframe.
#' @param plot_show Logical argument for plotting outliers.
#' @keywords outlier
#' @export
#' @examples
#' outlier.outline(Hitters,plot_show = TRUE)
outlier.outline <- function(data,plot_show = TRUE,type="density"){
options(warn=-1) ## warn silici
df <- data.frame(data)
margin_arbiter <-function(x){
if(sqrt(x) == round(sqrt(x))){
xlim <- sqrt(x)
ylim <- sqrt(x)
return(list("xlim"=xlim,"ylim"=ylim))
}
else{
xlim <- sqrt(x)
xlim <- floor(xlim)
ylim <- xlim + 1
if(xlim*ylim<x){
return(list("xlim"=xlim+1,"ylim"=ylim))
}
else{
return(list("xlim"=xlim,"ylim"=ylim))
}
}
}
plotter <- function(x){
#boxplot(x,horizontal = T,axes =F)
if(anyNA(x)){
x<-na.omit(x)
plot(density(x),
main = "",
xlab = "",
ylab = "")
legend("topright",c("p value = 3","negative skew"),cex = 1,bty = "n")
legend("center","This Var. Includes\nMissing Variables",cex = .7,col="red")
}
else{
plot(density(x),
main = "",
xlab = "",
ylab = "")
legend("center",c("p value = 3","negative skew"),cex = 1,,bty = "n")
}
}
just_numeric_index <- unlist(lapply(df, is.numeric))
just_numeric_vars <- df[,just_numeric_index]
margins <- margin_arbiter(length(just_numeric_index))
## below plots
if(plot_show==TRUE){
par(mfrow=c(margins$xlim,margins$ylim),new=F,mar=c(1,1,1,1))
k<-apply(just_numeric_vars,2,plotter)
}
## top plots
}
outlier.outline(Hitters,plot_show = T)
#' Outlier Outline
#'
#' This function allows you a report about outliers of your data.
#' @param data Dataset, matrix or dataframe.
#' @param plot_show Logical argument for plotting outliers.
#' @keywords outlier
#' @export
#' @examples
#' outlier.outline(Hitters,plot_show = TRUE)
outlier.outline <- function(data,plot_show = TRUE,type="density"){
options(warn=-1) ## warn silici
df <- data.frame(data)
margin_arbiter <-function(x){
if(sqrt(x) == round(sqrt(x))){
xlim <- sqrt(x)
ylim <- sqrt(x)
return(list("xlim"=xlim,"ylim"=ylim))
}
else{
xlim <- sqrt(x)
xlim <- floor(xlim)
ylim <- xlim + 1
if(xlim*ylim<x){
return(list("xlim"=xlim+1,"ylim"=ylim))
}
else{
return(list("xlim"=xlim,"ylim"=ylim))
}
}
}
plotter <- function(x){
#boxplot(x,horizontal = T,axes =F)
if(anyNA(x)){
x<-na.omit(x)
plot(density(x),
main = "",
xlab = "",
ylab = "")
legend("center",c("p value = 3","negative skew"),cex = 1,bty = "n")
legend("topright","This Var. Includes\nMissing Variables",cex = .7,col="red",bty="n")
}
else{
plot(density(x),
main = "",
xlab = "",
ylab = "")
legend("center",c("p value = 3","negative skew"),cex = 1,,bty = "n")
}
}
just_numeric_index <- unlist(lapply(df, is.numeric))
just_numeric_vars <- df[,just_numeric_index]
margins <- margin_arbiter(length(just_numeric_index))
## below plots
if(plot_show==TRUE){
par(mfrow=c(margins$xlim,margins$ylim),new=F,mar=c(1,1,1,1))
k<-apply(just_numeric_vars,2,plotter)
}
## top plots
}
outlier.outline(Hitters,plot_show = T)
#' Outlier Outline
#'
#' This function allows you a report about outliers of your data.
#' @param data Dataset, matrix or dataframe.
#' @param plot_show Logical argument for plotting outliers.
#' @keywords outlier
#' @export
#' @examples
#' outlier.outline(Hitters,plot_show = TRUE)
outlier.outline <- function(data,plot_show = TRUE,type="density"){
options(warn=-1) ## warn silici
df <- data.frame(data)
margin_arbiter <-function(x){
if(sqrt(x) == round(sqrt(x))){
xlim <- sqrt(x)
ylim <- sqrt(x)
return(list("xlim"=xlim,"ylim"=ylim))
}
else{
xlim <- sqrt(x)
xlim <- floor(xlim)
ylim <- xlim + 1
if(xlim*ylim<x){
return(list("xlim"=xlim+1,"ylim"=ylim))
}
else{
return(list("xlim"=xlim,"ylim"=ylim))
}
}
}
plotter <- function(x){
#boxplot(x,horizontal = T,axes =F)
if(anyNA(x)){
x<-na.omit(x)
plot(density(x),
main = "",
xlab = "",
ylab = "")
legend("center",c("p value = 3","negative skew"),cex = 1,bty = "n")
legend("topright","This Var. Includes\nMissing Variables",cex = .7,col="red",bty="n")
}
else{
plot(density(x),
main = "",
xlab = "",
ylab = "")
legend("center",c("p value = 3","negative skew"),cex = 1,bty = "n")
}
}
just_numeric_index <- unlist(lapply(df, is.numeric))
just_numeric_vars <- df[,just_numeric_index]
margins <- margin_arbiter(length(just_numeric_index))
## below plots
if(plot_show==TRUE){
par(mfrow=c(margins$xlim,margins$ylim),new=F,mar=c(1,1,1,1))
k<-apply(just_numeric_vars,2,plotter)
}
## top plots
}
outlier.outline(Hitters,plot_show = T)
#' Outlier Outline
#'
#' This function allows you a report about outliers of your data.
#' @param data Dataset, matrix or dataframe.
#' @param plot_show Logical argument for plotting outliers.
#' @keywords outlier
#' @export
#' @examples
#' outlier.outline(Hitters,plot_show = TRUE)
outlier.outline <- function(data,plot_show = TRUE,type="density"){
options(warn=-1) ## warn silici
df <- data.frame(data)
margin_arbiter <-function(x){
if(sqrt(x) == round(sqrt(x))){
xlim <- sqrt(x)
ylim <- sqrt(x)
return(list("xlim"=xlim,"ylim"=ylim))
}
else{
xlim <- sqrt(x)
xlim <- floor(xlim)
ylim <- xlim + 1
if(xlim*ylim<x){
return(list("xlim"=xlim+1,"ylim"=ylim))
}
else{
return(list("xlim"=xlim,"ylim"=ylim))
}
}
}
plotter <- function(x){
#boxplot(x,horizontal = T,axes =F)
if(anyNA(x)){
x<-na.omit(x)
plot(density(x),
main = "",
xlab = "",
ylab = "")
legend("center",c("p value = 3","negative skew"),cex = 1,bty = "n")
legend("topright","This Var. Includes\nMissing Variables",cex = .7,col="red",bty="n",text.col="red")
}
else{
plot(density(x),
main = "",
xlab = "",
ylab = "")
legend("center",c("p value = 3","negative skew"),cex = 1,bty = "n")
}
}
just_numeric_index <- unlist(lapply(df, is.numeric))
just_numeric_vars <- df[,just_numeric_index]
margins <- margin_arbiter(length(just_numeric_index))
## below plots
if(plot_show==TRUE){
par(mfrow=c(margins$xlim,margins$ylim),new=F,mar=c(1,1,1,1))
k<-apply(just_numeric_vars,2,plotter)
}
## top plots
}
outlier.outline(Hitters,plot_show = T)
#' Outlier Outline
#'
#' This function allows you a report about outliers of your data.
#' @param data Dataset, matrix or dataframe.
#' @param plot_show Logical argument for plotting outliers.
#' @keywords outlier
#' @export
#' @examples
#' outlier.outline(Hitters,plot_show = TRUE)
outlier.outline <- function(data,plot_show = TRUE,type="density"){
options(warn=-1) ## warn silici
df <- data.frame(data)
margin_arbiter <-function(x){
if(sqrt(x) == round(sqrt(x))){
xlim <- sqrt(x)
ylim <- sqrt(x)
return(list("xlim"=xlim,"ylim"=ylim))
}
else{
xlim <- sqrt(x)
xlim <- floor(xlim)
ylim <- xlim + 1
if(xlim*ylim<x){
return(list("xlim"=xlim+1,"ylim"=ylim))
}
else{
return(list("xlim"=xlim,"ylim"=ylim))
}
}
}
plotter <- function(x){
#boxplot(x,horizontal = T,axes =F)
if(anyNA(x)){
x<-na.omit(x)
plot(density(x),
main = "",
xlab = "",
ylab = "")
legend("center",c("p value = 3","negative skew"),cex = 1,bty = "n")
legend("topright","This Var. Includes\nMissing Values",cex = .8,col="red",bty="n",text.col="red")
}
else{
plot(density(x),
main = "",
xlab = "",
ylab = "")
legend("center",c("p value = 3","negative skew"),cex = 1,bty = "n")
}
}
just_numeric_index <- unlist(lapply(df, is.numeric))
just_numeric_vars <- df[,just_numeric_index]
margins <- margin_arbiter(length(just_numeric_index))
## below plots
if(plot_show==TRUE){
par(mfrow=c(margins$xlim,margins$ylim),new=F,mar=c(1,1,1,1))
k<-apply(just_numeric_vars,2,plotter)
}
## top plots
}
outlier.outline(Hitters,plot_show = T)
