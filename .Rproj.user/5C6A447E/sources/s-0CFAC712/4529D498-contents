#' Outlier Outline
#'
#' This function allows you a report about outliers of your data.
#' @param data Dataset, matrix or dataframe.
#' @param plot_show Logical argument for plot.
#' @keywords outlier
#' @export
#' @examples
#' outlier.outline(Hitters,plot_show = TRUE)



outlier.outline <- function(data,plot_show = TRUE,type="density",get_skew=FALSE){


  ####### margin arbiter func.-start ########

  margin_arbiter <-function(x){

    if(sqrt(x) == round(sqrt(x))){

      xlim <- sqrt(x)
      ylim <- sqrt(x)

      return(list("xlim"=xlim,"ylim"=ylim))
    }
    else{

      xlim <- sqrt(x)
      xlim <- floor(xlim)
      ylim <- xlim + 1

      if(xlim*ylim<x){
        return(list("xlim"=xlim+1,"ylim"=ylim))
      }
      else{
        return(list("xlim"=xlim,"ylim"=ylim))
      }
    }
  }

  ####### margin arbiter func.-end ########


#########################################################################################################


  ####### some statistical calculations via MVN ######

  options(warn=-1) ## warn hider

  df <- data.frame(data)

  dfn <- keep(df,is.numeric)

  results <- mvn(dfn)

  var_names <- variable.names(dfn)

  skewness <- results$Descriptives$Skew

  ####### some statistical calculations via MVN ######


  #########################################################################################################


  ######## finding optimal plot margins #########

  margin <- margin_arbiter(length(dfn))

  xlim <- margin$xlim

  ylim <- margin$ylim

  ######## finding optimal plot margins #########


  #########################################################################################################


  ######## below plots  ########

  if(plot_show==TRUE){



    plotter <- function(x, var){

      if (!anyNA(x[[var]])){
        plot(density(x[[var]]),
             main = var,
             xlab = "",
             ylab = "")
      }
      else{
        plot(density(x[[var]],na.rm = T),
             main = var,
             xlab = "",
             ylab = "s")
        legend("center",
               "This Var. \n Including Missing Values",
               bty = "n",cex = 1,text.col = "darkred")
      }

    }

    par(mfrow=c(xlim,ylim),mar=c(2.1,2.1,2.1,1))

    for(vn in var_names) plotter(dfn, vn)

  }


  ######## top plots ########


}

outlier.outline(kj)



margin_arbiter(7)






